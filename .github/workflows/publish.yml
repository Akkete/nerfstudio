# This workflows will upload a Python Package using twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install build twine
      - name: Strip unsupported tags in README
        run: |
          sed -i '/<!-- pypi-strip -->/,/<!-- \/pypi-strip -->/d' README.md
      - name: Build and publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m build
          twine upload --username __token__ --password $PYPI_TOKEN dist/*

  deploy-docker-image:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        env: # Or as an environment variable
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          python -m pip install --no-dependencies .
          ns_version="$(python -c "import pkg_resources;print(pkg_resources.require('nerfstudio')[0].version)")"
          echo ${DOCKER_TOKEN} | docker login hub.docker.com -u nerfstudio --password-stdin
          docker build -f Dockerfile -t nerfstudio/nerfstudio:${ns_version} -t nerfstudio/nerfstudio:latest .
          docker push nerfstudio/nerfstudio:${ns_version}
          docker push nerfstudio/nerfstudio:latest
